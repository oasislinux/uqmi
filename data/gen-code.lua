local prefix = arg[1]
local data = dofile(arg[2])

print[[
/* generated by uqmi gen-code.pl */
#include <stdio.h>
#include <string.h>
#include "qmi-message.h"

#define get_next(_size) ({ void *_buf = &tlv->data[ofs]; ofs += _size; if (ofs > cur_tlv_len) goto error_len; _buf; })
#define copy_tlv(_val, _size) \
	do { \
		unsigned int __size = _size; \
		if (__size > 0) \
			memcpy(__qmi_alloc_static(__size), _val, __size); \
	} while (0);

#define put_tlv_var(_type, _val, _size) \
	do { \
		_type __var = _val; \
		copy_tlv(&__var, _size); \
	} while(0)

]]

for _, msg in ipairs(data) do
	if msg.type == 'Message' then
		print('{')
		print(('\tqmi_init_request_message(msg, QMI_SERVICE_%s);'):format(prefix:upper()))
		print(('\tmsg->%s.message = cpu_to_le16(%s);'):format(prefix, msg.id))
		print()
		if msg.input then
			for _, field in ipairs(msg.input) do
				print(('\tif (req->set.%s) {'):format(cname(field.name)))
				print('\t\tvoid *buf;')
				print('\t\tunsigned int ofs;')
				print('\t\t__qmi_alloc_reset();')
				print('\t\tbuf = __qmi_get_buf(&ofs);')
				print(('\t\ttlv_new(msg, %s, ofs, buf);'):format(field.id))
				print('\t}')
				print()
			end
		end
		print('\treturn 0;')
		print('}')
		print()

		print('{')
		print('\tvoid *tlv_buf = &msg->$type.tlv;')
		print('\tunsigned int tlv_len = le16_to_cpu(msg->$type.tlv_len);')
		--print('\t')
		print('}')
	end
end
